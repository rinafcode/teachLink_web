{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 96, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/USER/Desktop/teachLink_web/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import NextAuth from \"next-auth\";\r\nimport { AuthOptions } from \"next-auth\";\r\nimport CredentialsProvider from \"next-auth/providers/credentials\";\r\nimport GoogleProvider from \"next-auth/providers/google\";\r\nimport GithubProvider from \"next-auth/providers/github\";\r\nimport { JWT } from \"next-auth/jwt\";\r\n\r\n// Extend the built-in session types\r\ndeclare module \"next-auth\" {\r\n  interface Session {\r\n    user: {\r\n      id: string;\r\n      email: string;\r\n      name?: string;\r\n      role?: string;\r\n      provider?: string;\r\n    }\r\n  }\r\n  interface User {\r\n    id: string;\r\n    email: string;\r\n    name?: string;\r\n    role?: string;\r\n  }\r\n}\r\n\r\nexport const authOptions: AuthOptions = {\r\n  providers: [\r\n    GoogleProvider({\r\n      clientId: process.env.GOOGLE_CLIENT_ID!,\r\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\r\n    }),\r\n    GithubProvider({\r\n      clientId: process.env.GITHUB_ID!,\r\n      clientSecret: process.env.GITHUB_SECRET!,\r\n    }),\r\n    CredentialsProvider({\r\n      name: \"credentials\",\r\n      credentials: {\r\n        email: { label: \"Email\", type: \"email\" },\r\n        password: { label: \"Password\", type: \"password\" }\r\n      },\r\n      async authorize(credentials) {\r\n        try {\r\n          // TODO: Replace with your actual API call\r\n          const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/auth/login`, {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(credentials),\r\n          });\r\n\r\n          const user = await response.json();\r\n\r\n          if (response.ok && user) {\r\n            return user;\r\n          }\r\n          return null;\r\n        } catch (error) {\r\n          console.error('Auth error:', error);\r\n          return null;\r\n        }\r\n      }\r\n    })\r\n  ],\r\n  pages: {\r\n    signIn: '/auth/login',\r\n    signOut: '/auth/logout',\r\n    error: '/auth/error',\r\n    verifyRequest: '/auth/verify-request',\r\n    newUser: '/auth/signup'\r\n  },\r\n  callbacks: {\r\n    async jwt({ token, user, account }) {\r\n      if (user) {\r\n        token.id = user.id;\r\n        token.role = user.role;\r\n      }\r\n      if (account) {\r\n        token.provider = account.provider;\r\n      }\r\n      return token;\r\n    },\r\n    async session({ session, token }) {\r\n      if (session.user) {\r\n        session.user.id = token.id as string;\r\n        session.user.role = token.role as string;\r\n        session.user.provider = token.provider as string;\r\n      }\r\n      return session;\r\n    },\r\n    async signIn({ user, account, profile }) {\r\n      if (account?.provider === 'google' || account?.provider === 'github') {\r\n        try {\r\n          // Sync social account with your backend\r\n          const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/auth/social-login`, {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\r\n              provider: account.provider,\r\n              providerId: profile?.sub,\r\n              email: user.email,\r\n              name: user.name,\r\n            }),\r\n          });\r\n\r\n          if (!response.ok) {\r\n            return false;\r\n          }\r\n        } catch (error) {\r\n          console.error('Social login error:', error);\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n  },\r\n  session: {\r\n    strategy: \"jwt\",\r\n    maxAge: 30 * 24 * 60 * 60, // 30 days\r\n  },\r\n  secret: process.env.NEXTAUTH_SECRET,\r\n};\r\n\r\nconst handler = NextAuth(authOptions);\r\nexport { handler as GET, handler as POST }; "],"names":[],"mappings":";;;;;AAAA;AAEA;AACA;AACA;;;;;AAsBO,MAAM,cAA2B;IACtC,WAAW;QACT,CAAA,GAAA,mJAAA,CAAA,UAAc,AAAD,EAAE;YACb,UAAU,QAAQ,GAAG,CAAC,gBAAgB;YACtC,cAAc,QAAQ,GAAG,CAAC,oBAAoB;QAChD;QACA,CAAA,GAAA,mJAAA,CAAA,UAAc,AAAD,EAAE;YACb,UAAU,QAAQ,GAAG,CAAC,SAAS;YAC/B,cAAc,QAAQ,GAAG,CAAC,aAAa;QACzC;QACA,CAAA,GAAA,wJAAA,CAAA,UAAmB,AAAD,EAAE;YAClB,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAQ;gBACvC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,IAAI;oBACF,0CAA0C;oBAC1C,MAAM,WAAW,MAAM,MAAM,GAAG,QAAQ,GAAG,CAAC,mBAAmB,CAAC,WAAW,CAAC,EAAE;wBAC5E,QAAQ;wBACR,SAAS;4BAAE,gBAAgB;wBAAmB;wBAC9C,MAAM,KAAK,SAAS,CAAC;oBACvB;oBAEA,MAAM,OAAO,MAAM,SAAS,IAAI;oBAEhC,IAAI,SAAS,EAAE,IAAI,MAAM;wBACvB,OAAO;oBACT;oBACA,OAAO;gBACT,EAAE,OAAO,OAAO;oBACd,QAAQ,KAAK,CAAC,eAAe;oBAC7B,OAAO;gBACT;YACF;QACF;KACD;IACD,OAAO;QACL,QAAQ;QACR,SAAS;QACT,OAAO;QACP,eAAe;QACf,SAAS;IACX;IACA,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE;YAChC,IAAI,MAAM;gBACR,MAAM,EAAE,GAAG,KAAK,EAAE;gBAClB,MAAM,IAAI,GAAG,KAAK,IAAI;YACxB;YACA,IAAI,SAAS;gBACX,MAAM,QAAQ,GAAG,QAAQ,QAAQ;YACnC;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,IAAI,QAAQ,IAAI,EAAE;gBAChB,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,EAAE;gBAC1B,QAAQ,IAAI,CAAC,IAAI,GAAG,MAAM,IAAI;gBAC9B,QAAQ,IAAI,CAAC,QAAQ,GAAG,MAAM,QAAQ;YACxC;YACA,OAAO;QACT;QACA,MAAM,QAAO,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE;YACrC,IAAI,SAAS,aAAa,YAAY,SAAS,aAAa,UAAU;gBACpE,IAAI;oBACF,wCAAwC;oBACxC,MAAM,WAAW,MAAM,MAAM,GAAG,QAAQ,GAAG,CAAC,mBAAmB,CAAC,kBAAkB,CAAC,EAAE;wBACnF,QAAQ;wBACR,SAAS;4BAAE,gBAAgB;wBAAmB;wBAC9C,MAAM,KAAK,SAAS,CAAC;4BACnB,UAAU,QAAQ,QAAQ;4BAC1B,YAAY,SAAS;4BACrB,OAAO,KAAK,KAAK;4BACjB,MAAM,KAAK,IAAI;wBACjB;oBACF;oBAEA,IAAI,CAAC,SAAS,EAAE,EAAE;wBAChB,OAAO;oBACT;gBACF,EAAE,OAAO,OAAO;oBACd,QAAQ,KAAK,CAAC,uBAAuB;oBACrC,OAAO;gBACT;YACF;YACA,OAAO;QACT;IACF;IACA,SAAS;QACP,UAAU;QACV,QAAQ,KAAK,KAAK,KAAK;IACzB;IACA,QAAQ,QAAQ,GAAG,CAAC,eAAe;AACrC;AAEA,MAAM,UAAU,CAAA,GAAA,qIAAA,CAAA,UAAQ,AAAD,EAAE","debugId":null}},
    {"offset": {"line": 220, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/USER/Desktop/teachLink_web/app/page.tsx"],"sourcesContent":["import { redirect } from \"next/navigation\";\r\nimport { getServerSession } from \"next-auth\";\r\nimport { authOptions } from \"./api/auth/[...nextauth]/route\";\r\n\r\nexport default async function Home() {\r\n  const session = await getServerSession(authOptions);\r\n\r\n  if (session) {\r\n    redirect(\"/dashboard\");\r\n  }\r\n\r\n  redirect(\"/auth/login\");\r\n}\r\n\r\n\r\n\r\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AACA;;;;AAEe,eAAe;IAC5B,MAAM,UAAU,MAAM,CAAA,GAAA,qIAAA,CAAA,mBAAgB,AAAD,EAAE,iJAAA,CAAA,cAAW;IAElD,IAAI,SAAS;QACX,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD,EAAE;IACX;IAEA,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD,EAAE;AACX","debugId":null}}]
}