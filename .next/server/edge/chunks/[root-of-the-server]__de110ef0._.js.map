{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/middleware.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\r\nimport type { NextRequest } from 'next/server';\r\nimport { getToken } from 'next-auth/jwt';\r\n\r\nexport async function middleware(request: NextRequest) {\r\n  const token = await getToken({ req: request });\r\n  const isAuthPage = request.nextUrl.pathname.startsWith('/auth');\r\n\r\n  if (isAuthPage) {\r\n    if (token) {\r\n      return NextResponse.redirect(new URL('/dashboard', request.url));\r\n    }\r\n    return NextResponse.next();\r\n  }\r\n\r\n  if (!token) {\r\n    const loginUrl = new URL('/auth/login', request.url);\r\n    loginUrl.searchParams.set('callbackUrl', request.url);\r\n    return NextResponse.redirect(loginUrl);\r\n  }\r\n\r\n  // Check for role-based access\r\n  if (request.nextUrl.pathname.startsWith('/admin') && token.role !== 'admin') {\r\n    return NextResponse.redirect(new URL('/unauthorized', request.url));\r\n  }\r\n\r\n  return NextResponse.next();\r\n}\r\n\r\nexport const config = {\r\n  matcher: [\r\n    '/dashboard/:path*',\r\n    '/admin/:path*',\r\n    '/auth/:path*',\r\n    '/profile/:path*',\r\n  ],\r\n}; "],"names":[],"mappings":";;;;AAAA;AAAA;AAEA;;;AAEO,eAAe,WAAW,OAAoB;IACnD,MAAM,QAAQ,MAAM,CAAA,GAAA,oJAAA,CAAA,WAAQ,AAAD,EAAE;QAAE,KAAK;IAAQ;IAC5C,MAAM,aAAa,QAAQ,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC;IAEvD,IAAI,YAAY;QACd,IAAI,OAAO;YACT,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,cAAc,QAAQ,GAAG;QAChE;QACA,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI;IAC1B;IAEA,IAAI,CAAC,OAAO;QACV,MAAM,WAAW,IAAI,IAAI,eAAe,QAAQ,GAAG;QACnD,SAAS,YAAY,CAAC,GAAG,CAAC,eAAe,QAAQ,GAAG;QACpD,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC;IAC/B;IAEA,8BAA8B;IAC9B,IAAI,QAAQ,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,aAAa,MAAM,IAAI,KAAK,SAAS;QAC3E,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,iBAAiB,QAAQ,GAAG;IACnE;IAEA,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI;AAC1B;AAEO,MAAM,SAAS;IACpB,SAAS;QACP;QACA;QACA;QACA;KACD;AACH"}}]
}